{"version":3,"file":"js.js","sourceRoot":"","sources":["../../src/configurators/js.ts"],"names":[],"mappings":";;;;;;;AAAA,AAAO,AAAE,AAAG,AAAE,AAAM,AAAQ,AAG5B,AAAM;;;;;;;;;;2BAA4B,AAAiC;AACjE,AAAmK;AACnK,QAAM,AAAO,YAET,AAAO,QAAC,AAAmB,AAAC;AAC5B,AAAO,aAAE,AAAK;AACd,AAAO,aAAE,AAAqB,sBAAC,AAAY,aAAC,AAAU,YAAE,AAAY,aAAC,AAAe,AAAC,AACtF,AAAC,AACH;AAJiC,GADhC,CADc;AAOhB,QAAM,AAAO,UAAG,CACd,AAAO,QAAC,AAAoC,AAAC,AAC9C;;AAED,AAAE,AAAC,MAAC,AAAY,aAAC,AAAI,SAAK,AAAM,UAAI,AAAY,aAAC,AAAa,cAAC,AAAY,AAAC,AAAC,eAAC,AAAC;AAC7E,AAAO,YAAC,AAAI,MAAE,AAAO,QAAC,AAAwB,AAAC;AAE3C,AAAW,mBAAE,AAAY;AACzB,AAAgB,wBAAE,AAAa,AAChC,AACF,AAAC,AAAC,AACL;AALI,KAD+C,CAApC;AAMd;;AAED,AAAY,eAAC,AAAO,sBAAe,AAA0B;AAAE,AAAQ,cAAE,CAAC,AAAe,AAAC;AAAE,AAAQ,cAAE,CAAC,AAAkB,oBAAE,AAAmB,AAAC,AAAC,AAAC,AAAC;AAApF,GAAxC,AAAY;AAClC,AAAY,eAAC,AAAO,sBAAe,AAA0B;AAAE,AAAQ,cAAE,CAAC,AAAe,AAAC;AAAE,AAAQ,cAAE,CAAC,AAAoC,AAAC,AAAC,AAAC,AAAC;AAAjF,GAAxC,AAAY;AAElC,AAAM;AACJ,AAAM,YAAE,AAAc;AACtB,AAAO;AACL,AAAO;AACP,AAAO,AACR,AACF,AACH;AALa;AAFJ;AAOR;;AAED,sBAAsB,AAAc,IAAE,AAAoB;AACxD,AAAG,AAAC,OAAC,MAAM,AAAI,QAAI,AAAK,AAAC,OAAC,AAAC;AACzB,UAAM,AAAM,SAAG,AAAO,QAAC,AAAI,AAAC;;AAC5B,AAAE,OAAC,AAAI,KAAC,CAAC,AAAM,OAAC,AAAO,WAAI,AAAM,AAAC,AAAC,AACrC;AAAC,AACH;AAAC;;AAED,+BAA+B,AAAmB,YAAE,AAAuB;AACzE,AAAE,AAAC,MAAC,AAAU,AAAC,YAAC,AAAC;AACf,AAAM;AACJ,AAAQ,gBAAE,AAAe,AAC1B,AACH;AAHS;AAGR;;AAED,MAAI,AAAW,cAAG,AAAO;;AACzB,AAAE,AAAC,MAAC,AAAG,mBAAC,AAAe,iBAAE,AAAc,AAAC,AAAC,iBAAC,AAAC;AACzC,AAAW,kBAAG,AAAO,AACvB;AAAC,AACD,AAAI,aAAK,AAAG,mBAAC,AAAe,iBAAE,AAAO,AAAC,AAAC,UAAC,AAAC;AACvC,AAAW,kBAAG,AAAO,AACvB;AAAC,AACD,AAAI,GAHC,AAAE,AAAC,MAGH,AAAE,AAAC,IAAC,AAAG,mBAAC,AAAe,iBAAE,AAAO,AAAC,AAAC,UAAC,AAAC;AACvC,AAAW,kBAAG,AAAO,AACvB;AAAC;;AAED,AAAM;AACJ,AAAI,UAAE,AAAW,AAClB,AACH;AAHS;AAGR","sourcesContent":["import { gte } from \"semver\"\nimport { WebpackConfigurator } from \"../main\"\n\nexport function createBabelLoader(configurator: WebpackConfigurator) {\n  // better to use require instead of just preset name to avoid babel resolving (in our test we set custom resolver - and only in case of explicit required it works)\n  const presets = [\n    [\n      require(\"@babel/preset-env\"), {\n      modules: false,\n      targets: computeBabelEnvTarget(configurator.isRenderer, configurator.electronVersion),\n    }],\n  ]\n  const plugins = [\n    require(\"babel-plugin-syntax-dynamic-import\"),\n  ]\n\n  if (configurator.type !== \"main\" && configurator.hasDependency(\"element-ui\")) {\n    plugins.push([require(\"babel-plugin-component\"), [\n      {\n        libraryName: \"element-ui\",\n        styleLibraryName: \"theme-chalk\"\n      },\n    ]])\n  }\n\n  addBabelItem(presets, configurator.getMatchingDevDependencies({includes: [\"babel-preset-\"], excludes: [\"babel-preset-env\", \"@babel/preset-env\"]}))\n  addBabelItem(plugins, configurator.getMatchingDevDependencies({includes: [\"babel-plugin-\"], excludes: [\"babel-plugin-syntax-dynamic-import\"]}))\n\n  return {\n    loader: \"babel-loader\",\n    options: {\n      presets,\n      plugins\n    }\n  }\n}\n\nfunction addBabelItem(to: Array<any>, names: Array<string>) {\n  for (const name of names) {\n    const module = require(name)\n    to.push([module.default || module])\n  }\n}\n\nfunction computeBabelEnvTarget(isRenderer: boolean, electronVersion: string) {\n  if (isRenderer) {\n    return {\n      electron: electronVersion\n    }\n  }\n\n  let nodeVersion = \"7.4.0\"\n  if (gte(electronVersion, \"2.0.0-beta.4\")) {\n    nodeVersion = \"8.9.3\"\n  }\n  else if (gte(electronVersion, \"1.8.2\")) {\n    nodeVersion = \"8.2.1\"\n  }\n  else if (gte(electronVersion, \"1.7.3\")) {\n    nodeVersion = \"7.9.0\"\n  }\n\n  return {\n    node: nodeVersion\n  }\n}"]}
