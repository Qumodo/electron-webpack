{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,AAAO,AAAe,AAAM,AAAc;;;;;;;;;;AAC1C,AAAO,AAAE,AAAI,AAAS,AAAM,AAAY;;;;;;;;;;AACxC,AAAO,AAAE,AAAY,AAAE,AAAM,AAAK;;;;;;;;;;AAClC,AAAO,AAAK,AAAI,AAAM,AAAM,AAE5B,AAAM;;;;;;AAAC,AAAK,0BAAqB,AAAY;AAC3C,AAAM,SAAC,AAAoB,qBAAC,AAAI,sBAAC,AAAI,AAAC,AAAC,AACzC;AAAC,AAED,AAAM;;8BAAkC,AAAmB;AACzD,AAAM,SAAC,AAAgB,iBAAC,AAAO,SAAE,AAAI,AAAC,AACxC;AAAC,AAED,AAAM;;0BAA8B,AAAmB,SAAE,AAAgB;AACvE,AAAM,iBACH,AAAK,MAAC,AAAC,AAAC,AAAE;AACT,AAAE,AAAC,QAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,YAAI,AAAC,EAAC,AAAI,SAAK,AAAS,AAAC,WAAC,AAAC;AAChD,AAAM,aAAC,AAAa,AACtB;AAAC;;AACD,UAAM,AAAC,AACT;AAAC,AAAC,AACN,GAPS,AAAO;AAOf,AAED,AAAM;;8BAA+B,AAAoB,OAAE,AAAsB;AAC/E,AAAM,SAAC,AAAe,uBAAC,AAAM,OAAC,AAAK,MAAC,AAAG,IAAC,AAAE,AAAC,AAAE,MAAC,AAAO,WAAI,AAAI,AAAC,AAAC,OAAC,AAAE,AAAC,AAAC,KAAC,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAE,AAAC,AAAC,MAAE,AAAE,AAAC,AAAE,MAAC,AAAU,WAAC,AAAE,AAAC,IAAC,AAAI,KAAC,AAAE,AAAC,AAAE,MAAC,AAAE,MAAI,AAAI,AAAC,AAAC,OACvI,AAAI,KAAC,AAAE,AAAC,AAAE,MAAC,AAAE,GAAC,AAAM,SAAG,AAAC,AAAC,AAAC,IAAC,AAAE,GAAC,AAAC,AAAC,AAAC,AAAC,KAAC,AAAI,AAAC,AAC7C;AAAC,AAED,AAAM;;qBAAsB,AAAmB,aAAE,AAAmB;AAClE,AAAM,aAAK,AAAO,QAAC,CAAC,AAAO,SAAE,AAAM,AAAE,AAAE;AACrC,UAAM,AAAM;AAAiB,AAAc,sBAAE,AAAI,AAAC,AAAC;AAAvB,KAAb,AAAY;AAC3B,AAAM,WAAC,AAAW,YAAC,AAAW,aAAE,AAAG,AAAE;AACnC,YAAM,AAAI,OAAG,AAAM,OAAC,AAAO,AAAE,UAAC,AAAI;AAClC,AAAM,aAAC,AAAK,MAAC,AAAG,AAAE,MAAC,AAAO,QAAC,AAAI,AAAC,AAAC,AACnC;AAAC,AAAC;;AAEF,sBAAkB,AAAY;AAC5B,AAAM,aAAC,AAAM;AACX,AAAI,cAAE,AAAW;AACjB,AAAI;AACJ,AAAO,iBAAE,AAAC;AACV,AAAS,mBAAE,AAAI,AAChB,AAAC,AACJ;AANgB;AAMf;;AAED,AAAM,WAAC,AAAE,GAAC,AAAO,SAAE,AAAC,AAAC,AAAE;AACrB,AAAE,AAAC,UAAE,AAAS,EAAC,AAAI,SAAK,AAAY,AAAC,cAAC,AAAC;AACrC,AAAM,eAAC,AAAK,MAAC,AAAG,AAAE,MAAC,AAAQ,SAAC,AAAC,AAAC,AAAC,AACjC;AAAC,AACD,AAAI,aAAC,AAAC;AACJ,AAAM,eAAC,AAAC,AAAC,AACX;AAAC,AACH;AAAC,AAAC;AAEF,AAAQ,aAAC,AAAW,AAAC,AACvB;AAAC,AAAC,AACJ,GA3BS;AA2BR","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { stat, Stats } from \"fs-extra-p\"\nimport { createServer } from \"net\"\nimport * as path from \"path\"\n\nexport async function statOrNull(file: string): Promise<Stats | null> {\n  return orNullIfFileNotExist(stat(file))\n}\n\nexport function orNullIfFileNotExist<T>(promise: Promise<T>): Promise<T | null> {\n  return orIfFileNotExist(promise, null)\n}\n\nexport function orIfFileNotExist<T>(promise: Promise<T>, fallbackValue: T): Promise<T> {\n  return promise\n    .catch(e => {\n      if (e.code === \"ENOENT\" || e.code === \"ENOTDIR\") {\n        return fallbackValue\n      }\n      throw e\n    })\n}\n\nexport function getFirstExistingFile(names: Array<string>, rootDir: string | null): Promise<string | null> {\n  return BluebirdPromise.filter(names.map(it => rootDir == null ? it : path.join(rootDir, it)), it => statOrNull(it).then(it => it != null))\n    .then(it => it.length > 0 ? it[0] : null)\n}\n\nexport function getFreePort(defaultHost: string, defaultPort: number) {\n  return new Promise((resolve, reject) => {\n    const server = createServer({pauseOnConnect: true})\n    server.addListener(\"listening\", () => {\n      const port = server.address().port\n      server.close(() => resolve(port))\n    })\n\n    function doListen(port: number) {\n      server.listen({\n        host: defaultHost,\n        port,\n        backlog: 1,\n        exclusive: true\n      })\n    }\n\n    server.on(\"error\", e => {\n      if ((e as any).code === \"EADDRINUSE\") {\n        server.close(() => doListen(0))\n      }\n      else {\n        reject(e)\n      }\n    })\n\n    doListen(defaultPort)\n  })\n}"]}
