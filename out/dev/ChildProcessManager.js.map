{"version":3,"file":"ChildProcessManager.js","sourceRoot":"","sources":["../../src/dev/ChildProcessManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChildProcess, spawn, SpawnOptions } from \"child_process\"\nimport * as path from \"path\"\n\nconst debug = require(\"debug\")(\"electron-webpack\")\n\nexport function run(program: string, args: Array<string>, options: SpawnOptions) {\n  const isWin = process.platform === \"win32\"\n  return spawn(isWin ? path.join(__dirname, \"../../vendor/runnerw.exe\") : program, isWin ? [program].concat(args) : args, options)\n}\n\nexport class ChildProcessManager {\n  // noinspection TypeScriptFieldCanBeMadeReadonly\n  private mainProcessExitCleanupCallback: (() => void) | null = null\n  // noinspection TypeScriptFieldCanBeMadeReadonly\n  private child: ChildProcess | null\n\n  constructor(child: ChildProcess, debugLabel: string, promiseNotifier: PromiseNotifier | null) {\n    this.child = child\n\n    require(\"async-exit-hook\")((callback: () => void) => {\n      this.mainProcessExitCleanupCallback = callback\n      const child = this.child\n      if (child == null) {\n        return\n      }\n\n      this.child = null\n\n      if (promiseNotifier != null) {\n        promiseNotifier.resolve()\n      }\n\n      if (debug.enabled) {\n        debug(`Send SIGINT to ${debugLabel}`)\n      }\n\n      if (process.platform === \"win32\") {\n        child.stdin.end(Buffer.from([5, 5]))\n      }\n      else {\n        child.kill(\"SIGINT\")\n      }\n    })\n\n    child.on(\"close\", code => {\n      const mainProcessExitCleanupCallback = this.mainProcessExitCleanupCallback\n      if (mainProcessExitCleanupCallback != null) {\n        this.mainProcessExitCleanupCallback = null\n        mainProcessExitCleanupCallback()\n      }\n\n      const child = this.child\n      if (child == null) {\n        return\n      }\n\n      this.child = null\n\n      const message = `${debugLabel} exited with code ${code}`\n\n      if (promiseNotifier != null) {\n        promiseNotifier.reject(new Error(message))\n      }\n\n      if (code === 0) {\n        if (debug.enabled) {\n          debug(message)\n          // otherwise no newline in the terminal\n          process.stderr.write(\"\\n\")\n        }\n      }\n      else {\n        process.stderr.write(`${message}\\n`)\n      }\n    })\n  }\n}\n\nexport class PromiseNotifier {\n  constructor(private _resolve: (() => void) | null, private _reject: ((error: Error) => void) | null) {\n  }\n\n  resolve() {\n    const r = this._resolve\n    if (r != null) {\n      this._resolve = null\n      r()\n    }\n  }\n\n  reject(error: Error) {\n    if (this._resolve != null) {\n      this._resolve = null\n    }\n\n    const _reject = this._reject\n    if (_reject != null) {\n      this._reject = null\n      _reject(error)\n    }\n  }\n}"]}
