{"version":3,"file":"HmrServer.js","sourceRoot":"","sources":["../../src/electron-main-hmr/HmrServer.ts"],"names":[],"mappings":";;;;;;;AAAA,AAAO,AAAO,AAAM,AAAS;;;;;;;;;;;;AAG7B,MAAM,AAAK,QAAG,AAAO,QAAC,AAAO,AAAC,SAAC,AAA6B,AAAC,AAE7D,AAAM;;;AAAN;AACU,SAAK,QAAG,AAAK;AACZ,SAAG,MAAG,KAAI,AAAO,AAAE,AAmC9B;AAAC;;AAjCC,AAAM;AACJ,AAAM,eAAK,AAAO,QAAC,CAAC,AAAO,SAAE,AAAM,AAAE,AAAE;AACrC,YAAM,AAAU,AAAG,uCAA0B,AAAO,QAAC,AAAG,IAAC,AAAQ,SAAC,AAAE,AAAC,GAAO;AAC5E,AAAI,WAAC,AAAG,IAAC,AAAM;AAAE,AAAI,cAAE,AAAU,AAAC;AAAlB,SAAoB,AAAK,AAAC,AAAE;AAC1C,AAAE,AAAC,YAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AAClB,AAAM,iBAAC,AAAK,AAAC,AACf;AAAC;;AACD,AAAE,AAAC,YAAC,AAAK,MAAC,AAAO,AAAC,SAAC,AAAC;AAClB,AAAK,AAAC,2CAA2B,AAAU,UAAE,AAAC,AAChD;AAAC;;AACD,AAAO,gBAAC,AAAU,AAAC,AACrB;AAAC,AAAC,AACJ;AAAC,AAAC,AACJ,KAZS;AAYR;;AAED,AAAa;AACX,AAAI,SAAC,AAAK,QAAG,AAAK,AACpB;AAAC;;AAED,AAAK,QAAC,AAAY;AAChB,AAAI,SAAC,AAAK,QAAG,AAAI;AACjB,AAAY,iBAAC,AAAG,AAAE;AAChB,AAAE,AAAC,UAAC,CAAC,AAAI,KAAC,AAAK,AAAC,OAAC,AAAC;AAChB,AAAM,AACR;AAAC;;AAED,YAAM,AAAI,aAAS,AAAM;AAAE,AAAM,gBAAE,AAAK;AAAE,AAAM,gBAAE,AAAK;AAAE,AAAQ,kBAAE,AAAK;AAAE,AAAO,iBAAE,AAAK,AAAC,AAAC;AAAhE,OAAb,AAAK,EAAyE,AAAI;;AAC/F,AAAE,AAAC,UAAC,AAAK,MAAC,AAAO,AAAC,SAAC,AAAC;AAClB,AAAK,AAAC,kCAAoB,AAAI,IAAE,AAAC,AACnC;AAAC;;AACD,AAAI,WAAC,AAAG,IAAC,AAAI,KAAC,AAAQ;AAAG,AAAI,AAAC,AAAC,AACjC;AAD0B;AACzB,AAAC,AACJ;AAAC,AACF","sourcesContent":["import Crocket from \"crocket\"\nimport { Stats } from \"webpack\"\n\nconst debug = require(\"debug\")(\"electron-webpack:dev-runner\")\n\nexport class HmrServer {\n  private state = false\n  readonly ipc = new Crocket()\n\n  listen(): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const socketPath = `/tmp/electron-main-ipc-${process.pid.toString(16)}.sock`\n      this.ipc.listen({path: socketPath}, error => {\n        if (error != null) {\n          reject(error)\n        }\n        if (debug.enabled) {\n          debug(`HMR Server listening on ${socketPath}`)\n        }\n        resolve(socketPath)\n      })\n    })\n  }\n\n  beforeCompile() {\n    this.state = false\n  }\n\n  built(stats: Stats): void {\n    this.state = true\n    setImmediate(() => {\n      if (!this.state) {\n        return\n      }\n\n      const hash = stats.toJson({assets: false, chunks: false, children: false, modules: false}).hash\n      if (debug.enabled) {\n        debug(`Send built: hash ${hash}`)\n      }\n      this.ipc.emit(\"/built\", {hash})\n    })\n  }\n}"]}
